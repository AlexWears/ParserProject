# Generated from python.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,93,8,8,1,9,1,9,1,9,1,9,5,9,99,8,
        9,10,9,12,9,102,9,9,1,10,1,10,1,10,1,10,3,10,108,8,10,1,11,4,11,
        111,8,11,11,11,12,11,112,1,12,3,12,116,8,12,1,12,1,12,3,12,120,8,
        12,1,12,3,12,123,8,12,1,13,1,13,3,13,127,8,13,1,14,1,14,1,14,1,14,
        5,14,133,8,14,10,14,12,14,136,9,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,5,18,150,8,18,10,18,12,18,153,9,18,
        1,18,1,18,5,18,157,8,18,10,18,12,18,160,9,18,1,18,1,18,5,18,164,
        8,18,10,18,12,18,167,9,18,1,18,5,18,170,8,18,10,18,12,18,173,9,18,
        1,18,5,18,176,8,18,10,18,12,18,179,9,18,1,18,1,18,1,19,1,19,1,20,
        4,20,186,8,20,11,20,12,20,187,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        3,26,210,8,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,3,4,0,37,37,42,43,45,
        45,47,47,2,0,9,9,32,32,2,0,60,60,62,62,235,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        1,55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,62,1,0,0,0,9,67,1,0,0,0,
        11,72,1,0,0,0,13,76,1,0,0,0,15,80,1,0,0,0,17,92,1,0,0,0,19,94,1,
        0,0,0,21,107,1,0,0,0,23,110,1,0,0,0,25,115,1,0,0,0,27,126,1,0,0,
        0,29,128,1,0,0,0,31,139,1,0,0,0,33,143,1,0,0,0,35,145,1,0,0,0,37,
        147,1,0,0,0,39,182,1,0,0,0,41,185,1,0,0,0,43,189,1,0,0,0,45,192,
        1,0,0,0,47,194,1,0,0,0,49,196,1,0,0,0,51,198,1,0,0,0,53,209,1,0,
        0,0,55,56,5,9,0,0,56,2,1,0,0,0,57,58,5,61,0,0,58,4,1,0,0,0,59,60,
        5,105,0,0,60,61,5,102,0,0,61,6,1,0,0,0,62,63,5,101,0,0,63,64,5,108,
        0,0,64,65,5,105,0,0,65,66,5,102,0,0,66,8,1,0,0,0,67,68,5,101,0,0,
        68,69,5,108,0,0,69,70,5,115,0,0,70,71,5,101,0,0,71,10,1,0,0,0,72,
        73,5,110,0,0,73,74,5,111,0,0,74,75,5,116,0,0,75,12,1,0,0,0,76,77,
        5,97,0,0,77,78,5,110,0,0,78,79,5,100,0,0,79,14,1,0,0,0,80,81,5,111,
        0,0,81,82,5,114,0,0,82,16,1,0,0,0,83,84,5,84,0,0,84,85,5,114,0,0,
        85,86,5,117,0,0,86,93,5,101,0,0,87,88,5,70,0,0,88,89,5,97,0,0,89,
        90,5,108,0,0,90,91,5,115,0,0,91,93,5,101,0,0,92,83,1,0,0,0,92,87,
        1,0,0,0,93,18,1,0,0,0,94,100,3,27,13,0,95,99,3,27,13,0,96,99,3,25,
        12,0,97,99,3,45,22,0,98,95,1,0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,
        102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,20,1,0,0,0,102,100,
        1,0,0,0,103,108,3,29,14,0,104,108,3,31,15,0,105,108,3,25,12,0,106,
        108,3,17,8,0,107,103,1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,0,107,
        106,1,0,0,0,108,22,1,0,0,0,109,111,2,48,57,0,110,109,1,0,0,0,111,
        112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,24,1,0,0,0,114,116,
        5,45,0,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,0,0,0,117,119,
        3,23,11,0,118,120,5,46,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,122,
        1,0,0,0,121,123,3,23,11,0,122,121,1,0,0,0,122,123,1,0,0,0,123,26,
        1,0,0,0,124,127,3,33,16,0,125,127,3,35,17,0,126,124,1,0,0,0,126,
        125,1,0,0,0,127,28,1,0,0,0,128,134,5,34,0,0,129,133,3,27,13,0,130,
        133,3,25,12,0,131,133,3,41,20,0,132,129,1,0,0,0,132,130,1,0,0,0,
        132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,
        135,137,1,0,0,0,136,134,1,0,0,0,137,138,5,34,0,0,138,30,1,0,0,0,
        139,140,5,39,0,0,140,141,3,27,13,0,141,142,5,39,0,0,142,32,1,0,0,
        0,143,144,2,97,122,0,144,34,1,0,0,0,145,146,2,65,90,0,146,36,1,0,
        0,0,147,151,5,91,0,0,148,150,3,41,20,0,149,148,1,0,0,0,150,153,1,
        0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,
        0,0,0,154,171,3,21,10,0,155,157,3,41,20,0,156,155,1,0,0,0,157,160,
        1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,
        1,0,0,0,161,165,5,44,0,0,162,164,3,41,20,0,163,162,1,0,0,0,164,167,
        1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,
        1,0,0,0,168,170,3,21,10,0,169,158,1,0,0,0,170,173,1,0,0,0,171,169,
        1,0,0,0,171,172,1,0,0,0,172,177,1,0,0,0,173,171,1,0,0,0,174,176,
        3,41,20,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,
        1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,93,0,0,181,38,
        1,0,0,0,182,183,7,0,0,0,183,40,1,0,0,0,184,186,7,1,0,0,185,184,1,
        0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,42,1,0,
        0,0,189,190,5,13,0,0,190,191,5,10,0,0,191,44,1,0,0,0,192,193,5,95,
        0,0,193,46,1,0,0,0,194,195,5,40,0,0,195,48,1,0,0,0,196,197,5,41,
        0,0,197,50,1,0,0,0,198,199,5,58,0,0,199,52,1,0,0,0,200,201,5,61,
        0,0,201,210,5,61,0,0,202,203,5,33,0,0,203,210,5,61,0,0,204,210,7,
        2,0,0,205,206,5,60,0,0,206,210,5,61,0,0,207,208,5,62,0,0,208,210,
        5,61,0,0,209,200,1,0,0,0,209,202,1,0,0,0,209,204,1,0,0,0,209,205,
        1,0,0,0,209,207,1,0,0,0,210,54,1,0,0,0,19,0,92,98,100,107,112,115,
        119,122,126,132,134,151,158,165,171,177,187,209,0
    ]

class pythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IF = 3
    ELIF = 4
    ELSE = 5
    NOT = 6
    AND = 7
    OR = 8
    BOOL = 9
    ID = 10
    LITERAL = 11
    INT = 12
    NUMBER = 13
    LETTER = 14
    STRING = 15
    CHAR = 16
    LOWERCASE = 17
    UPPERCASE = 18
    ARRAY = 19
    OPSYMBOL = 20
    WS = 21
    NL = 22
    US = 23
    LPAREN = 24
    RPAREN = 25
    COLON = 26
    COMPAREOP = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\t'", "'='", "'if'", "'elif'", "'else'", "'not'", "'and'", 
            "'or'", "'\\r\\n'", "'('", "')'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "NOT", "AND", "OR", "BOOL", "ID", "LITERAL", 
            "INT", "NUMBER", "LETTER", "STRING", "CHAR", "LOWERCASE", "UPPERCASE", 
            "ARRAY", "OPSYMBOL", "WS", "NL", "US", "LPAREN", "RPAREN", "COLON", 
            "COMPAREOP" ]

    ruleNames = [ "T__0", "T__1", "IF", "ELIF", "ELSE", "NOT", "AND", "OR", 
                  "BOOL", "ID", "LITERAL", "INT", "NUMBER", "LETTER", "STRING", 
                  "CHAR", "LOWERCASE", "UPPERCASE", "ARRAY", "OPSYMBOL", 
                  "WS", "NL", "US", "LPAREN", "RPAREN", "COLON", "COMPAREOP" ]

    grammarFileName = "python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


